as.matrix((x - hold)^2)
colSums(as.matrix((x - hold)^2))
sqrt(colSums(as.matrix((x - hold)^2)))
min(sqrt(colSums(as.matrix((x - hold)^2))))
max(sqrt(colSums(as.matrix((x - hold)^2))))
mean(sqrt(colSums(as.matrix((x - hold)^2))))
sqrt(mean(colSums(as.matrix((x - hold)^2))))
names(files)
as.matrix((x - hold)^2)
colSums(as.matrix((x - hold)^2))
(as.matrix((x - hold)^2))
colSums(as.matrix((x - hold)^2))
colSums(as.matrix((x - hold)^2)) / nrow(x)
sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x))
min(sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x)))
max(sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x)))
meam(sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x)))
mean(sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x)))
median(sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x)))
sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x))
library(vioplot)
library(ggplot2)
data <- sqrt(colSums(as.matrix((x - hold)^2)) / nrow(x))
ggplot(data = data)
data.frame(data)
df <- data.frame(data)
ggplot(df)
df
ggplot(df)
geom_violin()
ggplot(df, aes(y = data))
ggplot(df, aes(y = data)) + geom_violin()
df$method <- names(files)[[1]]
df
ggplot(df, aes(x = method, y = data)) + geom_violin()
ggplot(df, aes(x = method, y = data, color = method))) + geom_violin()
ggplot(df, aes(x = method, y = data, color = method)) + geom_violin()
ggplot(df, aes(x = method, y = data, fill = method)) + geom_violin()
rmse <- lapply(files, function(x) sqrt(colSums(as.matrix((x - P)^2)) / nrow(P)))
P <- readRDS('Hrvatin_afteint_props.rds')
rmse <- lapply(files, function(x) sqrt(colSums(as.matrix((x - P)^2)) / nrow(P)))
rmse
data.frame(rmse)
library(tidyverse)
install.packages(tidyverse)
install.packages('tidyverse')
liibrary(tidyverse)
library(tidyverse)
df %>% gather(Methods, val)
df
rmse %>% gather(Methods, val)
rmse
df <- data.frame(rmse)
df
df %>% gather(Methods, val)
df %>% gather(Methods, Value) %>% tail(.)
df <- df %>% gather(Methods, Value)
ggplot2(df, aes(x = Method, y = val))
df
library(ggplot2)
ggplot2(df, aes(x = Method, y = Value))
ggplot(df, aes(x = Method, y = Value))
df
ggplot(df, aes(x = Methods, y = Value))
ggplot(df, aes(x = Methods, y = Value)) + geom_violin()
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin()
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 5) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 1) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 2) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 1.5) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 1.3) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
rmse <- lapply(files, function(x) sqrt(colSums(as.matrix((x - P)^2)) / nrow(P)))
rmse <- data.frame(rmse)
rmse
rmse <- rmse %>% gather(Methods, Value)
rmse
getPlot <- function(df, name) {
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 1.3) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave(paste0("Plots/Vioplot_", name, ".png"), width = 1920*3, height = 1080*3, dpi=300)
}
getPlot(rmse, "rmse")
getPlot <- function(df, name) {
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 1.3) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave(paste0("Plots/Vioplot_", name, ".png"), width = 1920*3, height = 1080*3, dpi=300, units = "px")
}
getPlot(rmse, "rmse")
list.files()
m_dist <- lapply(files, function(x) dist(rbind(as.vector(x), as.vector(unlist(P))), method = "minkowski", p = minkowski_p))
m_dist <- lapply(files, function(x) dist(rbind(as.vector(x), as.vector(unlist(P))), method = "minkowski", p = 2))
m_dist
library(lsa)
cosine(P,x)
x
mapply(function(x, y) cosine(x,y), P, x)
mapply(function(x, y) cosine(x,y), P, hold)
hold
P
mapply(function(x, y) cosine(x,y), hold, P)
dim(hold)
dim(P)
data.frame(hold)
mapply(function(x, y) cosine(x,y), data.frame(hold), P)
data.frame(hold)
cos <- mapply(function(x, y) cosine(x,y), data.frame(hold), P)
cos <- data.frame(cos)
cos
cos <- lapply(files, function (x)  { mapply(function(y, z) cosine(y,z), data.frame(x), P) })
cos
cos <- data.frame(cos)
cos
cos <- cos %>% gather(Methods, Value)
cos
cos
getPlot(cos, "avgcos")
getPlot <- function(df, name) {
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 3) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave(paste0("Plots/Vioplot_", name, ".png"), width = 1920*3, height = 1080*3, dpi=300)
}
getPlot(cos, "avgcos")
getPlot <- function(df, name) {
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 3) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave(paste0("Plots/Vioplot_", name, ".png"), width = 1920*3, height = 1080*3, dpi=300, units = "px")
}
getPlot(cos, "avgcos")
getPlot <- function(df, name) {
ggplot(df, aes(x = Methods, y = Value, fill = Methods)) + geom_violin(width = 1.3) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave(paste0("Plots/Vioplot_", name, ".png"), width = 1920*3, height = 1080*3, dpi=300, units = "px")
}
getPlot(cos, "avgcos")
q()
library(devtools)
install.packages('devtools')
library(devtools)
github_pat
devtools::install_github("shenorrlab/bseq-sc", auth_token = "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")
devtools::install_github("shenorrlab/bseq-sc", auth_token = "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")
library(remotes)
remotes::install_github("renozao/xbioc", auth_token = "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")
head(x, 10000)
head("aaa", 10000)
q()
x < -"aaa"
x <-"aaa"
grep("a", x)
!grep("a", x)
x <- "C0_aaa.rds"
sub("C0_*.rds", "aa", x)
sub("C0_*.rds", "xxxx", x)
sub("*.rds", "xxxx", x)
sub("C0_**.rds", "xxxx", x)
sub("C0_.*.rds", "xxxx", x)
sub("C0_.*.rds", "ss", x)
sub("C0_.*\.rds", "ss", x)
sub("C0_.*.rds", "ss", x)
sub("C0_.*.rds", "C0_xx", x)
sub("C0_.*.rds", "C1_xx", x)
sub("aaaC0_.*.rds", "", x)
x <- "aaaa_C0_xyyxyx.rds"
sub("C0_.*.rds", "", x)
x <- "aaaa_C0_xyyxy_transformed.rds"
sub(".rds", paste0("_", "asdas", "_scaled.rds"), x)
"aaa" + 1
paste0("aaa", 1)
list.files()
q()
list.files
list.files()
x <- readRDS('Hrvatin_afteint_pbulks.rds')
y <- readRDS('Hrvatin_afteint_props.rds')
x
head(x)
y
q()
x <- readRDS("ma")
x <- readRDS("mat.rds")
x
heatmap(x)
x
lower.tri(x)
upper.tri(x)
x[upper.tri(x)]
t(x[upper.tri(x)])
t(x)
x[lower.tri(x)] <- t(x)[lower.tri(x)]
x
heatmap(x)
x
heatmap(x, dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none')
?heatmap
heatmap(x, Rowv=FALSE, Colv=FALSE)
?heatmap
heatmap(x, Rowv=NULL, Colv=NULL)
image(x)
heatmap.2
heatmap(x)
?heatmap
heatmap(x, symm = TRUE)
heatmap(x, Rowv = NA, Colv = NA)
heatmap(x, Rowv = NA, Colv = rev(Rowv))
heatmap(x, Rowv = NA, Colv = rev("Rowv"))
heatmap(x, Rowv = names(files))
# Heatmap for method agreements
#
# @zgr2788
suppressMessages(library(dplyr))
suppressMessages(library(lsa))
getAvgDist <- function(x,y){
idx <- seq_len(ncol(x))
distances <- sapply(idx, function(z) cosine(x[,z], y[,z]))
return(mean(distances))
}
sampleName <- "Hrvatin_afteint"
#Get files as list
filenames <- list.files("Output") %>% lapply(., function(x) { x <- paste0("Output/", x) }) %>% lapply(., function(x) { grep(sampleName, x, value = TRUE) }) %>% .[lengths(.)!=0] %>% as.character(.)
files <- lapply(filenames, readRDS)
names(files) <- lapply(filenames, function(x) gsub("Output/.*res_(.*).rds", "\\1", x))
#Generate combs to iterate over
combs <- combn(files, 2)
colnames(combs) <- combn(names(files), 2, paste0, collapse="@")
avgDists <- sapply(seq_len(ncol(combs)), function(z) getAvgDist(combs[,z][[1]], combs[,z][[2]]))
names(avgDists) <- colnames(combs)
#Generate matrix
mat <- matrix(0, nrow = length(files), ncol = length(files))
diag(mat) <- 1
colnames(mat) <- names(files)
rownames(mat) <- names(files)
#Copy upper triangle to lower
x[lower.tri(x)] <- t(x)[lower.tri(x)]
x
mat
#Get files as list
filenames <- list.files("Output") %>% lapply(., function(x) { x <- paste0("Output/", x) }) %>% lapply(., function(x) { grep(sampleName, x, value = TRUE) }) %>% .[lengths(.)!=0] %>% as.character(.)
files <- lapply(filenames, readRDS)
names(files) <- lapply(filenames, function(x) gsub("Output/.*res_(.*).rds", "\\1", x))
#Generate combs to iterate over
combs <- combn(files, 2)
colnames(combs) <- combn(names(files), 2, paste0, collapse="@")
avgDists <- sapply(seq_len(ncol(combs)), function(z) getAvgDist(combs[,z][[1]], combs[,z][[2]]))
names(avgDists) <- colnames(combs)
#Generate matrix
mat <- matrix(0, nrow = length(files), ncol = length(files))
diag(mat) <- 1
colnames(mat) <- names(files)
rownames(mat) <- names(files)
#Copy upper triangle to lower
mat[lower.tri(mat)] <- t(mat)[lower.tri(mat)]
mat
files
#Generate combs to iterate over
combs <- combn(files, 2)
colnames(combs) <- combn(names(files), 2, paste0, collapse="@")
avgDists <- sapply(seq_len(ncol(combs)), function(z) getAvgDist(combs[,z][[1]], combs[,z][[2]]))
names(avgDists) <- colnames(combs)
#Generate matrix
mat <- matrix(0, nrow = length(files), ncol = length(files))
diag(mat) <- 1
colnames(mat) <- names(files)
rownames(mat) <- names(files)
#Copy upper triangle to lower
mat[upper.tri(mat)] <- avgDists
mat[lower.tri(mat)] <- t(mat)[lower.tri(mat)]
mat
heatmap(mat, Rowv = names(files))
names(files)
order(names(files))
heatmap(mat, Rowv = order(names(files))
)
heatmap(mat, Rowv = order(names(files)), order(names(files)))
heatmap(mat, Rowv = NA)
heatmap(mat, Rowv = NA, Colv = NA)
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE)
library(viridis)
viridis(20)
viridis(35)
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = viridis)
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = viridis(20))
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = viridis(256))
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = viridis(1000))
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = viridis(256), RowSideColors = viridis(256))
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = viridis(256))
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = rev(viridis(256)))
diag(mat)
heatmap(mat)
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE)
upper.tri(mat)
mat[upper.tri(mat)]
mat[lower.tri(mat)]
mat
mat == t(mat)
all(mat == t(mat))
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = rev(viridis(256)), scale = "none")
heatmap(mat, Rowv = NA, Colv = NA, revC = TRUE, col = , scale = "none")
heatmap(mat, col = , scale = "none")
heatmap(mat, col = viridis(256), scale = "none")
heatmap(mat, col = rev(viridis(256)), scale = "none")
legend()
legend(1, 95)
legend("color")
legend(legend="color")
legend(x="right", legend=c("min", "med", "max"),fill=viridis(3))
legend(x="bottomright", legend=c("min", "med", "max"),fill=viridis(3))
q()
MuSiC <- readRDS("Output/Hrvatin_1_res_MuSiC.rds")
CIBERSORT <- readRDS("Output/Hrvatin_1_res_CIBERSORT.rds")
truth <- readRDS("Hrvatin_1_props.rds")
truth
head(truth)
dim(truth)
dim(MuSiC)
rownames(MuSiC)
rownames(CIBERSORT)
rownames(truth)
rmse <- function(x) sqrt(mean(as.matrix((x - P)^2)))
rmse
rmse(truth)
P <- truth
rm(truth)
rmse(CIBERSORT)
rmse(MuSiC)
fardeep <- readRDS("Output/Hrvatin_1_res_FARDEEP.rds")
epidish <- readRDS("Output/Hrvatin_1_res_EpiDISH.rds")
epidish + fardeep
colSums(epidish + fardeep)
mean(epidish + fardeep)
(epidish+fardeep)/2
(epidish+fardeep)
(epidish+fardeep)/2
colSums((epidish+fardeep)/2)
rmse((epidish+fardeep)/2)
rmse((MuSiC*2)/2)
rmse((MuSiC+fardeep)/2)
rmse((fardeep*2)/2)
rmse((fardeep+MuSiC+epidish+CIBERSORT)/4)
(fardeep+MuSiC+epidish+CIBERSORT)/4
P <- MuSiC
rmse((fardeep+MuSiC+epidish+CIBERSORT)/4)
P <- readRDS("Hrvatin_1_props.rds")
q()
MuSiC <- readRDS("Output/MacParland2018_UCAM_res_MuSiC.rds")
MuSiC
x <- readRDS("MacParland2018_UCAM_C2.rds")
x
table(x$cellType)
x$cellType=="Cholangiocytes"
x[x$cellType=="Cholangiocytes",]
intersect(x[x$cellType=="Cholangiocytes",], x[x$cellType=="Hepatocytes"]
)
intersect(x[x$cellType=="Cholangiocytes",], x[x$cellType=="Hepatocytes",])
x[x$cellType=="Hepatocytes",]
x[x$cellType=="Hepatocytes",]$geneName
intersect(x[x$cellType=="Cholangiocytes",]$geneName, x[x$cellType=="Hepatocytes",]$geneName)
x[x$cellType %in% intersect(x[x$cellType=="Cholangiocytes",]$geneName, x[x$cellType=="Hepatocytes",]$geneName),]
x[x$geneName %in% intersect(x[x$cellType=="Cholangiocytes",]$geneName, x[x$cellType=="Hepatocytes",]$geneName),]
q()
MuSiC <- readRDS("Output/MacParland2018_UCAM_res_MuSiC.rds")
#Get files as list
filenames <- list.files("Output") %>% lapply(., function(x) { x <- paste0("Output/", x) }) %>% lapply(., function(x) { grep(sampleName, x, value = TRUE) }) %>% .[lengths(.)!=0] %>% as.character(.)
files <- lapply(filenames, readRDS)
names(files) <- lapply(filenames, function(x) gsub("Output/.*res_(.*).rds", "\\1", x))
library(dplyr)
#Get files as list
filenames <- list.files("Output") %>% lapply(., function(x) { x <- paste0("Output/", x) }) %>% lapply(., function(x) { grep(sampleName, x, value = TRUE) }) %>% .[lengths(.)!=0] %>% as.character(.)
files <- lapply(filenames, readRDS)
names(files) <- lapply(filenames, function(x) gsub("Output/.*res_(.*).rds", "\\1", x))
sampleName <- "MacParland2018_UCAM"
#Get files as list
filenames <- list.files("Output") %>% lapply(., function(x) { x <- paste0("Output/", x) }) %>% lapply(., function(x) { grep(sampleName, x, value = TRUE) }) %>% .[lengths(.)!=0] %>% as.character(.)
files <- lapply(filenames, readRDS)
names(files) <- lapply(filenames, function(x) gsub("Output/.*res_(.*).rds", "\\1", x))
files
files["MuSiC"]
files["DCQ"]
files["MuSiC"]
files <- lapply(files, function(x) x[order(match(rownames(x), rownames(files[[1]]))),])
files["MuSiC"]
files["DCQ"]
files["FARDEEp"]
files["FARDEEP"]
files["MOMF"]
files["DWLS"]
files["SCDC"]
files["DWLS"]
files["CIBERSORT"]
files["bseqsc"]
files["Bisque"]
sum(files)
unlist(files)
sum(unlist(files))
unlist(files)
files
x <- matrix(0, nrow = nrow(MuSiC), ncol = ncol(MuSiC))
x
x + MuSiC
lapply(files, function(z) x <<- x + z)
x
colSums(x)
is.na(x)
any(is.na(x))
lapply(files, function(z) any(is.na(z)))
x
table(x)
table(x)[x=="NA"]
table(is.na(x))
is.na(x)
x
x / colSums(x)
colSums(x / colSums(x))
t(x) / rowSums(t(x))
t(t(x) / rowSums(t(x)))
colSums(t(t(x) / rowSums(t(x))))
t(t(x) / rowSums(t(x)))
res <- t(t(x) / rowSums(t(x)))
function(x) sqrt(mean(as.matrix((x - res)^2)))
rmse <- function(x) sqrt(mean(as.matrix((x - res)^2)))
rmse(MuSiC)
MuSiC
x
res
res - MuSiC
rmse <- function(x) ik <- as.matrix((x - res)^2) ; ik[is.na(ik)] <- 0 ; sqrt(mean(ik))
rmse <- function(x) {ik <- as.matrix((x - res)^2) ; ik[is.na(ik)] <- 0 ; sqrt(mean(ik))}
rmse(MuSiC)
rmse(DWLS)
lapply(files, rmse)
lapply(files, function(y) cor(c(as.matrix(res)), c(as.matrix(y))))
c(res)
res[is.na(res)] <-
0
lapply(files, function(y) cor(c(as.matrix(res)), c(as.matrix(y))))
q()
x <- read.csv("sampleTable_SE.csv", stringsAsFactors = TRUE)
x <- read.csv("sampleTable_SE.csv", stringsAsFactors = TRUE, strip.white = TRUE)
x
x <- read.csv("sampleTable.csv", stringsAsFactors = TRUE, strip.white = TRUE)
head(x)
str(x)
x$Layout
model.matrix(~ Layout + Instrument_model + Tissue_type)
model.matrix(~ Layout + Instrument_model + Tissue_type, x)
q()
x
head(x)
x <- read.csv("sampleTable_SE.csv", strip.white = TRUE, stringsAsFactors = TRUE)
str(x)
model.matrix(~ Layout)
model.matrix(~ Layout, x)
model.matrix(~ Fresh_tissue, x)
model.matrix(~ GEO_for_Study, x)
table(x$GEO_for_Study)
q()
library(DESeq2)
?DESeq
DESeq
DESeqParallel
ls
ls()
!ls
q()
library(DESeq2)
lfcShrink()
?lfcShrink
q()
?lfcShrink
libraru(DESeq2)
library(DESeq2)
?lfcShrink
library(DESeq2)
?results
library(biomaRt)
library(Homo.sapiens)
df <- read.csv("Counts_raw.csv", row.names = 1)
head(rownames(df))
df$gene_names <- mapIds(
Homo.sapiens,
keys = rownames(df),
column = 'SYMBOL',
keytype = 'ENSEMBL',
mult
)
df$gene_names <- mapIds(
Homo.sapiens,
keys = rownames(df),
column = 'SYMBOL',
keytype = 'ENSEMBL',
multiVals = 'first'
)
df$gene_names
df[,"gene_names"]
df2 <- df[,"gene_names"]
df2
df2 <- df[,c(-1,-2)]
df2
df2 <- df[,-305:1]
df2 <- df[,305]
df2 <- df[,306]
df2 <- df[,c(305,306)]
df2
write.csv(df2, "Gene_names_ref.csv")
q()
setwd("/home/zgr2788_pw/Documents/GitHub/crossBBR_display/Aggregs")
norm <- read.csv("aggreg_deseq2.csv")
valid <- read.csv("aggreg_deseq2_valid.csv")
head(valid)
head(norm)
norm <- read.csv("aggreg_deseq2.csv", row.names = 1)
head(norm)
valid <- read.csv("aggreg_deseq2_valid.csv", row.names = 1)
valid$Validated <- valid$Name %in% norm$Name
head(valid)
write.csv(valid, "aggreg_deseq2_valid.csv")
q()
